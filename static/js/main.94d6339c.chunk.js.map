{"version":3,"sources":["styles/global.js","components/Header/styles.js","components/Header/index.js","pages/main/styles.js","pages/main/index.js","pages/character/styles.js","components/CharacterDetails/styles.js","components/CharacterDetails/index.js","pages/character/index.js","pages/edit/styles.js","pages/edit/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","AppHeader","styled","header","Header","width","height","xmlns","fill","d","Container","div","Card","CardLocal","Form","form","props","withError","ListContainer","LocalCharacters","localCharacters","JSON","parse","localStorage","getItem","useState","list","updateList","map","id","name","key","Math","random","src","alt","type","onClick","filter","item","window","setItem","stringify","handleRemoveItem","Main","CHARACTERS_LIST","setFilter","showLocal","setshowLocal","search","setSearch","gql","useQuery","loading","error","data","useEffect","characters","onChange","event","target","value","placeholder","char","to","thumbnail","CharacterDetails","useParams","CHARACTER","series","className","Character","FormContainer","useEdit","entries","setEntries","entriesFromStorage","entry","items","newEntries","Entry","addEntry","setId","setName","history","useHistory","onSubmit","e","preventDefault","trim","length","push","EditCharacter","storeEntry","Routes","exact","path","component","render","client","ApolloClient","uri","App","basename","process","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94d6339c.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n    sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    text-rendering: optimizeLegibility !important;\r\n    -webkit-font-smoothing: antialiased !important;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import styled from 'styled-components';\r\n\r\nexport const AppHeader = styled.header`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  h1 {\r\n    color: #202020;\r\n    font-size: 20px;\r\n    margin-top: 20px;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AppHeader } from './styles';\r\n\r\nconst Header = () => (\r\n  <AppHeader>\r\n    <svg width=\"130\" height=\"52\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <rect fill=\"#EC1D24\" width=\"100%\" height=\"100%\" />\r\n      <path fill=\"#FEFEFE\" d=\"M126.222 40.059v7.906H111.58V4h7.885v36.059h6.757zm-62.564-14.5c-.61.294-1.248.44-1.87.442v-14.14h.04c.622-.005 5.264.184 5.264 6.993 0 3.559-1.58 5.804-3.434 6.705zM40.55 34.24l2.183-18.799 2.265 18.799H40.55zm69.655-22.215V4.007H87.879l-3.675 26.779-3.63-26.78h-8.052l.901 7.15c-.928-1.832-4.224-7.15-11.48-7.15-.047-.002-8.06 0-8.06 0l-.031 39.032-5.868-39.031-10.545-.005-6.072 40.44.002-40.435H21.278L17.64 26.724 14.096 4.006H4v43.966h7.95V26.78l3.618 21.192h4.226l3.565-21.192v21.192h15.327l.928-6.762h6.17l.927 6.762 15.047.008h.01v-.008h.02V33.702l1.845-.27 3.817 14.55h7.784l-.002-.01h.022l-5.011-17.048c2.538-1.88 5.406-6.644 4.643-11.203v-.002C74.894 19.777 79.615 48 79.615 48l9.256-.027 6.327-39.85v39.85h15.007v-7.908h-7.124v-10.08h7.124v-8.03h-7.124v-9.931h7.124z\" />\r\n      <path fill=\"#EC1D24\" d=\"M0 0h30v52H0z\" />\r\n      <path fill=\"#FEFEFE\" d=\"M31.5 48V4H21.291l-3.64 22.735L14.102 4H4v44h8V26.792L15.577 48h4.229l3.568-21.208V48z\" />\r\n    </svg>\r\n    <h1>Lista de Personagens Marvel</h1>\r\n  </AppHeader>\r\n);\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 20px;\n`;\n\nexport const Card = styled.div`\n  background-color: #333;\n  border-radius: 3px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 310px;\n  margin: 10px 10px;\n  width: 300px;\n\n  &:hover {\n    background-color: #444;\n  }\n  img {\n    border-radius: 3px;\n    margin: 10px 10px 0 10px;\n    width: 210px;\n    height: 200px;\n  }\n  h2 {\n    color: #FFF;\n    font-size: 20px;\n    padding: 20px;\n  }\n`;\n\nexport const CardLocal = styled.div`\n  background-color: #EC1D24;\n  border-radius: 3px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 310px;\n  margin: 10px 10px;\n  width: 300px;\n\n  img {\n    border-radius: 3px;\n    margin: 10px 10px 0 10px;\n    width: 210px;\n    height: 200px;\n  }\n  h2 {\n    color: #FFF;\n    font-size: 20px;\n    padding: 20px;\n  }\n   button {\n    background-color: #DDD;\n    border: 0;\n    border-radius: 3px;\n    color: #EC1D24;\n    font-size: 14px;\n    padding: 5px 10px;\n  }\n`;\n\nexport const Form = styled.form`\n  margin-top: 20px;\n  width: 100%;\n  max-width: 400px;\n  display: flex;\n  padding: 0 10px;\n  input {\n    flex: 1;\n    height: 50px;\n    padding: 0 20px;\n    background-color: #ffffff;\n    font-size: 18px;\n    color: #444;\n    border-radius: 3px;\n    border: ${(props) => (props.withError ? '2px solid #EC1D24' : '1px solid #999')};\n  }\n  button {\n    height: 50px;\n    margin-left: 10px;\n    background-color: #333;\n    color: #ffffff;\n    border: 0;\n    font-size: 20px;\n    font-weight: bold;\n    border-radius: 3px;\n    width: 100px;\n    &:hover {\n      background-color: #EC1D24;\n      cursor: pointer;\n    }\n  }\n`;\n\nexport const ListContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-top: 40px;\n  a {\n    text-decoration: none;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport Header from '../../components/Header';\n\nimport {\n  Container, Form, ListContainer, CardLocal, Card,\n} from './styles';\n\n// Verificar e Mostrar salvos no localstorage\nconst local = JSON.parse(\n  window.localStorage.getItem('@softplanMarvel'),\n);\nif (!local) {\n  window.localStorage.setItem('@softplanMarvel', '[]');\n}\n\nfunction LocalCharacters() {\n  const localCharacters = JSON.parse(localStorage.getItem('@softplanMarvel'));\n  const [list, updateList] = useState(localCharacters);\n  const handleRemoveItem = ({ id }) => {\n    updateList(list.filter((item) => item.id.id !== id));\n    window.localStorage.setItem('@softplanMarvel', JSON.stringify(list));\n  };\n\n  return localCharacters.map(({ id, name }) => (\n    <CardLocal key={Math.random() + id}>\n      <img src=\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" alt={name} />\n      <h2>{name}</h2>\n      <button type=\"button\" onClick={() => handleRemoveItem(id)}>Remover</button>\n    </CardLocal>\n  ));\n}\n\nexport default function Main() {\n  const [filter, setFilter] = useState([]);\n  const [showLocal, setshowLocal] = useState(true);\n  const [search, setSearch] = useState('');\n  let CHARACTERS_LIST;\n  if (search) {\n    CHARACTERS_LIST = gql`\n    {\n    characters(where: { nameStartsWith: \"${search}\" }) {\n      id\n      name\n      thumbnail\n      series {\n        name\n      }\n    }\n  }`;\n  } else {\n    CHARACTERS_LIST = gql`\n    {\n    characters {\n      id\n      name\n      thumbnail\n      series {\n        name\n      }\n    }\n  }`;\n  }\n  const { loading, error, data } = useQuery(CHARACTERS_LIST);\n\n  useEffect(() => {\n    if (data) {\n      setFilter(data.characters);\n    }\n  }, [data]);\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n    setshowLocal(false);\n    if (event.target.value === '') {\n      setshowLocal(true);\n    }\n    // setFilter(data.characters.filter((char) => {\n    //   const { name } = char;\n    //   return name.toLowerCase().search(\n    //     event.target.value.toLowerCase(),\n    //   ) !== -1;\n    // }));\n  }\n\n  return (\n    <>\n      <Container>\n        <Header />\n        <Form>\n          <input\n            type=\"search\"\n            onChange={handleChange}\n            placeholder=\"Pesquisar\"\n            value={search}\n          />\n        </Form>\n        { error ? (<Container>erro :( </Container>) : ('') }\n        { loading ? (<Container>loading</Container>) : (\n          <>\n            <ListContainer>\n              { showLocal ? (<LocalCharacters />) : ('') }\n              {filter.map((char) => (\n                <Link to={`/character/${char.id}`} key={char.id}>\n                  <Card>\n                    <img src={char.thumbnail} alt={char.name} />\n                    <h2>{char.name}</h2>\n                  </Card>\n                </Link>\n              ))}\n            </ListContainer>\n          </>\n        )}\n      </Container>\n    </>\n  );\n}\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n`;\r\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin-top: 40px;\n  height: 300px;\n  img {\n    border-radius: 3px;\n    width: 300px;\n  }\n  h2 {\n    font-size: 26px;\n    padding: 10px 20px;\n    text-transform: uppercase;\n  }\n  a {\n    background-color: #DDD;\n    border-radius: 3px;\n    color: #EC1D24;\n    font-size: 18px;\n    margin-left: 10px;\n    padding: 0 10px;\n    text-decoration: none;\n    &:hover {\n      background-color: #CCC;\n    }\n    }\n  div {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    h3 {\n      color: #202020;\n      margin-top: 20px;\n      text-transform: uppercase;\n    }\n    ul {\n      list-style: none;\n      margin: 10px 20px;\n      max-width: 300px;\n      li {\n        line-height: 26px;\n      }\n    }\n    .backToHome {\n      color: #202020;\n      margin-top: 20px;\n    }\n  }\n`;\n","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Container } from './styles';\n\nconst CharacterDetails = () => {\n  const { id } = useParams();\n\n  const CHARACTER = gql`\n  {\n    characters(where: { id: ${id} }) {\n      id\n      name\n      thumbnail\n      series {\n        name\n      }\n    }\n  }\n`;\n  const { loading, error, data } = useQuery(CHARACTER);\n\n  if (loading) {\n    return (\n      <Container>\n        <p>Loading...</p>\n      </Container>\n    );\n  }\n  if (error) {\n    return (\n      <Container>\n        <p>Error :(</p>\n      </Container>\n    );\n  }\n  return (\n    <>\n      <Container>\n        <img src={data.characters[0].thumbnail} alt={data.characters[0].name} />\n        <div>\n          <h2>\n            {data.characters[0].name}\n            <Link to={`/edit/${id}`}>Editar</Link>\n          </h2>\n          <h3>Séries:</h3>\n          <ul>\n            { data.characters[0].series.map(({ name }) => (\n              <li key={name}>\n                -\n                {' '}\n                {name}\n              </li>\n            )) }\n          </ul>\n          <Link className=\"backToHome\" to=\"/\">VOLTAR</Link>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default CharacterDetails;\n","import React from 'react';\r\nimport Header from '../../components/Header';\r\nimport { Container } from './styles';\r\nimport CharacterDetails from '../../components/CharacterDetails';\r\n\r\nconst Character = () => (\r\n  <>\r\n    <Container>\r\n      <Header />\r\n      <CharacterDetails />\r\n    </Container>\r\n  </>\r\n);\r\n\r\nexport default Character;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n`;\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n  img {\r\n    border-radius: 3px;\r\n    width: 221px;\r\n  }\r\n`;\r\n\r\n\r\nexport const Form = styled.form`\r\n  margin-top: 20px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  display: flex;\r\n  padding: 0 10px;\r\n  input {\r\n    flex: 1;\r\n    height: 55px;\r\n    padding: 0 20px;\r\n    background-color: #ffffff;\r\n    font-size: 18px;\r\n    color: #444;\r\n    border-radius: 3px;\r\n    border: ${(props) => (props.withError ? '2px solid #EC1D24' : '1px solid #999')};\r\n  }\r\n  button {\r\n    height: 55px;\r\n    margin-left: 10px;\r\n    background-color: #333;\r\n    color: #ffffff;\r\n    border: 0;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    border-radius: 3px;\r\n    width: 100px;\r\n    &:hover {\r\n      background-color: #EC1D24;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport Header from '../../components/Header';\r\nimport { Container, FormContainer, Form } from './styles';\r\n\r\nfunction useEdit() {\r\n  const [entries, setEntries] = useState([]);\r\n\r\n  const getEntriesFromStorage = () => JSON.parse(\r\n    window.localStorage.getItem('@softplanMarvel'),\r\n  );\r\n  const setEntriesToStorage = (items) => window.localStorage.setItem('@softplanMarvel', JSON.stringify(items));\r\n  useEffect(() => {\r\n    const entriesFromStorage = getEntriesFromStorage();\r\n    if (entriesFromStorage) {\r\n      setEntries(entriesFromStorage);\r\n    }\r\n  }, []);\r\n\r\n  const storeEntry = (entry) => {\r\n    const newEntries = [entry, ...entries];\r\n    setEntries(newEntries);\r\n    setEntriesToStorage(newEntries);\r\n  };\r\n\r\n  return [entries, storeEntry];\r\n}\r\n\r\n// eslint-disable-next-line react/prop-types\r\nfunction Entry({ addEntry }) {\r\n  const [id, setId] = useState(useParams());\r\n  const [name, setName] = useState('');\r\n  const history = useHistory();\r\n  const handleOnChange = (e) => setName(e.target.value);\r\n  const handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name && name.trim().length > 0) {\r\n      addEntry({\r\n        id,\r\n        name,\r\n      });\r\n      setId('');\r\n      setName('');\r\n      history.push('/');\r\n    }\r\n  };\r\n  const CHARACTER = gql`\r\n  {\r\n    characters(where: { id: ${id.id} }) {\r\n      id\r\n      name\r\n      thumbnail\r\n    }\r\n  }\r\n`;\r\n  const { loading, error, data } = useQuery(CHARACTER);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container>\r\n        <p>Loading...</p>\r\n      </Container>\r\n    );\r\n  }\r\n  if (error) {\r\n    return (\r\n      <Container>\r\n        <p>Error :(</p>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Header />\r\n        <FormContainer>\r\n          <img src={data.characters[0].thumbnail} alt={data.characters[0].name} />\r\n          <Form onSubmit={handleOnSubmit}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder={data.characters[0].name}\r\n                value={name}\r\n                onChange={handleOnChange}\r\n              />\r\n            </div>\r\n            <button type=\"submit\">Editar</button>\r\n          </Form>\r\n        </FormContainer>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction EditCharacter() {\r\n  const [entries, storeEntry] = useEdit();\r\n  const handleAddEntry = (entry) => storeEntry(entry);\r\n  return (\r\n    <div className=\"container\">\r\n      <Entry addEntry={handleAddEntry} list={entries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditCharacter;\r\n","import React from 'react';\r\n\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Main from '../pages/main';\r\nimport Character from '../pages/character';\r\nimport EditCharacter from '../pages/edit';\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Main} />\r\n    <Route path=\"/character/:id\" component={Character} />\r\n    <Route path=\"/edit/:id\" component={EditCharacter} />\r\n    <Route render={() => <h2>404 página não encontrada :(</h2>} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport GlobalStyle from './styles/global';\r\nimport Routes from './routes';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.marvelql.com/',\r\n});\r\n\r\nconst App = () => (\r\n  <>\r\n    <ApolloProvider client={client}>\r\n      <GlobalStyle />\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Routes />\r\n      </BrowserRouter>\r\n    </ApolloProvider>\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","/* eslint-disable no-console */\r\n/* eslint-disable no-use-before-define */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}